ca65 V2.19 - Git 84bcd53
Main file   : C:\Prosjekt\c64\prosjekt\build\gfx_helpers.c.21424.2.s
Current file: C:\Prosjekt\c64\prosjekt\build\gfx_helpers.c.21424.2.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 84bcd53
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 84bcd53"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	c_sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.import		_memcpy
000000r 1               	.import		_memset
000000r 1               	.import		_cbm_k_chrin
000000r 1               	.import		_cbm_k_readst
000000r 1               	.export		_pulse_border_tick
000000r 1               	.export		_wait_frames
000000r 1               	.export		_init_bitmap_blank
000000r 1               	.export		_read_screen_progress
000000r 1               	.export		_read_color_progress
000000r 1               	.export		_wait_video_frames
000000r 1               	.export		_wait_video_seconds
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ pulse_border_tick (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_pulse_border_tick: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  AD rr rr     	lda     M0001
000003r 1  4A           	lsr     a
000004r 1  4A           	lsr     a
000005r 1  4A           	lsr     a
000006r 1  29 07        	and     #$07
000008r 1  8D 20 D0     	sta     $D020
00000Br 1  EE rr rr     	inc     M0001
00000Er 1  60           	rts
00000Fr 1               
00000Fr 1               .segment	"DATA"
000000r 1               
000000r 1               M0001:
000000r 1  00           	.byte	$00
000001r 1               
000001r 1               .endproc
000001r 1               
000001r 1               ; ---------------------------------------------------------------
000001r 1               ; void __near__ wait_frames (unsigned char frames)
000001r 1               ; ---------------------------------------------------------------
000001r 1               
000001r 1               .segment	"CODE"
00000Fr 1               
00000Fr 1               .proc	_wait_frames: near
00000Fr 1               
00000Fr 1               .segment	"CODE"
00000Fr 1               
00000Fr 1  20 rr rr     	jsr     pusha
000012r 1  A2 D0        	ldx     #$D0
000014r 1  A9 12        	lda     #$12
000016r 1  8D rr rr     	sta     M0001
000019r 1  8E rr rr     	stx     M0001+1
00001Cr 1  4C rr rr     	jmp     L0006
00001Fr 1  AD rr rr     L0002:	lda     M0001+1
000022r 1  85 rr        	sta     ptr1+1
000024r 1  AD rr rr     	lda     M0001
000027r 1  85 rr        	sta     ptr1
000029r 1  B1 rr        	lda     (ptr1),y
00002Br 1  8D rr rr     	sta     M0002
00002Er 1  AD rr rr     L0005:	lda     M0001+1
000031r 1  85 rr        	sta     ptr1+1
000033r 1  AD rr rr     	lda     M0001
000036r 1  85 rr        	sta     ptr1
000038r 1  B1 rr        	lda     (ptr1),y
00003Ar 1  CD rr rr     	cmp     M0002
00003Dr 1  F0 EF        	beq     L0005
00003Fr 1  A0 00        L0006:	ldy     #$00
000041r 1  B1 rr        	lda     (c_sp),y
000043r 1  08           	php
000044r 1  B1 rr        	lda     (c_sp),y
000046r 1  38           	sec
000047r 1  E9 01        	sbc     #$01
000049r 1  91 rr        	sta     (c_sp),y
00004Br 1  28           	plp
00004Cr 1  D0 D1        	bne     L0002
00004Er 1  4C rr rr     	jmp     incsp1
000051r 1               
000051r 1               .segment	"BSS"
000000r 1               
000000r 1               M0001:
000000r 1  00 00        	.res	2,$00
000002r 1               M0002:
000002r 1  00           	.res	1,$00
000003r 1               
000003r 1               .endproc
000003r 1               
000003r 1               ; ---------------------------------------------------------------
000003r 1               ; void __near__ init_bitmap_blank (unsigned char bg)
000003r 1               ; ---------------------------------------------------------------
000003r 1               
000003r 1               .segment	"CODE"
000051r 1               
000051r 1               .proc	_init_bitmap_blank: near
000051r 1               
000051r 1               .segment	"CODE"
000051r 1               
000051r 1  20 rr rr     	jsr     pusha
000054r 1  AD 00 DD     	lda     $DD00
000057r 1  29 FC        	and     #$FC
000059r 1  09 02        	ora     #$02
00005Br 1  8D 00 DD     	sta     $DD00
00005Er 1  AD 11 D0     	lda     $D011
000061r 1  29 EF        	and     #$EF
000063r 1  8D 11 D0     	sta     $D011
000066r 1  A9 18        	lda     #$18
000068r 1  8D 16 D0     	sta     $D016
00006Br 1  8D 18 D0     	sta     $D018
00006Er 1  A0 00        	ldy     #$00
000070r 1  B1 rr        	lda     (c_sp),y
000072r 1  8D 21 D0     	sta     $D021
000075r 1  B1 rr        	lda     (c_sp),y
000077r 1  8D 20 D0     	sta     $D020
00007Ar 1  A2 44        	ldx     #$44
00007Cr 1  98           	tya
00007Dr 1  20 rr rr     	jsr     pushax
000080r 1  A2 03        	ldx     #$03
000082r 1  A9 E8        	lda     #$E8
000084r 1  20 rr rr     	jsr     ___bzero
000087r 1  A9 00        	lda     #$00
000089r 1  8D rr rr     	sta     M0001
00008Cr 1  8D rr rr     	sta     M0001+1
00008Fr 1  AD rr rr     L0002:	lda     M0001+1
000092r 1  C9 03        	cmp     #$03
000094r 1  D0 05        	bne     L0006
000096r 1  AD rr rr     	lda     M0001
000099r 1  C9 E8        	cmp     #$E8
00009Br 1  B0 1D        L0006:	bcs     L0003
00009Dr 1  AD rr rr     	lda     M0001
0000A0r 1  85 rr        	sta     ptr1
0000A2r 1  AD rr rr     	lda     M0001+1
0000A5r 1  18           	clc
0000A6r 1  69 D8        	adc     #$D8
0000A8r 1  85 rr        	sta     ptr1+1
0000AAr 1  A9 00        	lda     #$00
0000ACr 1  A8           	tay
0000ADr 1  91 rr        	sta     (ptr1),y
0000AFr 1  EE rr rr     	inc     M0001
0000B2r 1  D0 DB        	bne     L0002
0000B4r 1  EE rr rr     	inc     M0001+1
0000B7r 1  4C rr rr     	jmp     L0002
0000BAr 1  A9 3B        L0003:	lda     #$3B
0000BCr 1  8D 11 D0     	sta     $D011
0000BFr 1  4C rr rr     	jmp     incsp1
0000C2r 1               
0000C2r 1               .segment	"BSS"
000003r 1               
000003r 1               M0001:
000003r 1  00 00        	.res	2,$00
000005r 1               
000005r 1               .endproc
000005r 1               
000005r 1               ; ---------------------------------------------------------------
000005r 1               ; unsigned char __near__ read_screen_progress (unsigned char frames_per_row)
000005r 1               ; ---------------------------------------------------------------
000005r 1               
000005r 1               .segment	"CODE"
0000C2r 1               
0000C2r 1               .proc	_read_screen_progress: near
0000C2r 1               
0000C2r 1               .segment	"CODE"
0000C2r 1               
0000C2r 1  20 rr rr     	jsr     pusha
0000C5r 1  A9 00        	lda     #$00
0000C7r 1  8D rr rr     	sta     M0001
0000CAr 1  8D rr rr     	sta     M0001+1
0000CDr 1  AD rr rr     L0002:	lda     M0001+1
0000D0r 1  C9 00        	cmp     #$00
0000D2r 1  D0 05        	bne     L0006
0000D4r 1  AD rr rr     	lda     M0001
0000D7r 1  C9 19        	cmp     #$19
0000D9r 1  B0 77        L0006:	bcs     L0003
0000DBr 1  A9 00        	lda     #$00
0000DDr 1  8D rr rr     	sta     M0002
0000E0r 1  8D rr rr     	sta     M0002+1
0000E3r 1  AD rr rr     L0008:	lda     M0002+1
0000E6r 1  C9 00        	cmp     #$00
0000E8r 1  D0 05        	bne     L000C
0000EAr 1  AD rr rr     	lda     M0002
0000EDr 1  C9 28        	cmp     #$28
0000EFr 1  B0 4F        L000C:	bcs     L0009
0000F1r 1  20 rr rr     	jsr     _cbm_k_chrin
0000F4r 1  8D rr rr     	sta     M0003
0000F7r 1  8E rr rr     	stx     M0003+1
0000FAr 1  E0 80        	cpx     #$80
0000FCr 1  B0 07        	bcs     L0011
0000FEr 1  20 rr rr     	jsr     _cbm_k_readst
000101r 1  29 40        	and     #$40
000103r 1  F0 06        	beq     L000E
000105r 1  A2 00        L0011:	ldx     #$00
000107r 1  8A           	txa
000108r 1  4C rr rr     	jmp     incsp1
00010Br 1  AD rr rr     L000E:	lda     M0001
00010Er 1  AE rr rr     	ldx     M0001+1
000111r 1  20 rr rr     	jsr     pushax
000114r 1  A9 28        	lda     #$28
000116r 1  20 rr rr     	jsr     tosumula0
000119r 1  18           	clc
00011Ar 1  6D rr rr     	adc     M0002
00011Dr 1  48           	pha
00011Er 1  8A           	txa
00011Fr 1  6D rr rr     	adc     M0002+1
000122r 1  AA           	tax
000123r 1  68           	pla
000124r 1  18           	clc
000125r 1  69 40        	adc     #$40
000127r 1  85 rr        	sta     ptr1
000129r 1  8A           	txa
00012Ar 1  69 7F        	adc     #$7F
00012Cr 1  85 rr        	sta     ptr1+1
00012Er 1  AD rr rr     	lda     M0003
000131r 1  A0 00        	ldy     #$00
000133r 1  91 rr        	sta     (ptr1),y
000135r 1  EE rr rr     	inc     M0002
000138r 1  D0 A9        	bne     L0008
00013Ar 1  EE rr rr     	inc     M0002+1
00013Dr 1  4C rr rr     	jmp     L0008
000140r 1  A0 00        L0009:	ldy     #$00
000142r 1  B1 rr        	lda     (c_sp),y
000144r 1  20 rr rr     	jsr     _wait_frames
000147r 1  EE rr rr     	inc     M0001
00014Ar 1  D0 81        	bne     L0002
00014Cr 1  EE rr rr     	inc     M0001+1
00014Fr 1  4C rr rr     	jmp     L0002
000152r 1  A2 00        L0003:	ldx     #$00
000154r 1  A9 01        	lda     #$01
000156r 1  4C rr rr     	jmp     incsp1
000159r 1               
000159r 1               .segment	"BSS"
000005r 1               
000005r 1               M0001:
000005r 1  00 00        	.res	2,$00
000007r 1               M0002:
000007r 1  00 00        	.res	2,$00
000009r 1               M0003:
000009r 1  00 00        	.res	2,$00
00000Br 1               
00000Br 1               .endproc
00000Br 1               
00000Br 1               ; ---------------------------------------------------------------
00000Br 1               ; unsigned char __near__ read_color_progress (unsigned char frames_per_row)
00000Br 1               ; ---------------------------------------------------------------
00000Br 1               
00000Br 1               .segment	"CODE"
000159r 1               
000159r 1               .proc	_read_color_progress: near
000159r 1               
000159r 1               .segment	"CODE"
000159r 1               
000159r 1  20 rr rr     	jsr     pusha
00015Cr 1  A9 00        	lda     #$00
00015Er 1  8D rr rr     	sta     M0001
000161r 1  8D rr rr     	sta     M0001+1
000164r 1  AD rr rr     L0002:	lda     M0001+1
000167r 1  C9 00        	cmp     #$00
000169r 1  D0 05        	bne     L0006
00016Br 1  AD rr rr     	lda     M0001
00016Er 1  C9 19        	cmp     #$19
000170r 1  90 03 4C rr  L0006:	jcs     L0003
000174r 1  rr           
000175r 1  A9 00        	lda     #$00
000177r 1  8D rr rr     	sta     M0002
00017Ar 1  8D rr rr     	sta     M0002+1
00017Dr 1  AD rr rr     L0008:	lda     M0002+1
000180r 1  C9 00        	cmp     #$00
000182r 1  D0 05        	bne     L000C
000184r 1  AD rr rr     	lda     M0002
000187r 1  C9 28        	cmp     #$28
000189r 1  B0 4F        L000C:	bcs     L0009
00018Br 1  20 rr rr     	jsr     _cbm_k_chrin
00018Er 1  8D rr rr     	sta     M0003
000191r 1  8E rr rr     	stx     M0003+1
000194r 1  E0 80        	cpx     #$80
000196r 1  B0 07        	bcs     L0017
000198r 1  20 rr rr     	jsr     _cbm_k_readst
00019Br 1  29 40        	and     #$40
00019Dr 1  F0 06        	beq     L000E
00019Fr 1  A2 00        L0017:	ldx     #$00
0001A1r 1  8A           	txa
0001A2r 1  4C rr rr     	jmp     incsp1
0001A5r 1  AD rr rr     L000E:	lda     M0001
0001A8r 1  AE rr rr     	ldx     M0001+1
0001ABr 1  20 rr rr     	jsr     pushax
0001AEr 1  A9 28        	lda     #$28
0001B0r 1  20 rr rr     	jsr     tosumula0
0001B3r 1  18           	clc
0001B4r 1  6D rr rr     	adc     M0002
0001B7r 1  48           	pha
0001B8r 1  8A           	txa
0001B9r 1  6D rr rr     	adc     M0002+1
0001BCr 1  AA           	tax
0001BDr 1  68           	pla
0001BEr 1  18           	clc
0001BFr 1  69 28        	adc     #$28
0001C1r 1  85 rr        	sta     ptr1
0001C3r 1  8A           	txa
0001C4r 1  69 83        	adc     #$83
0001C6r 1  85 rr        	sta     ptr1+1
0001C8r 1  AD rr rr     	lda     M0003
0001CBr 1  A0 00        	ldy     #$00
0001CDr 1  91 rr        	sta     (ptr1),y
0001CFr 1  EE rr rr     	inc     M0002
0001D2r 1  D0 A9        	bne     L0008
0001D4r 1  EE rr rr     	inc     M0002+1
0001D7r 1  4C rr rr     	jmp     L0008
0001DAr 1  AD rr rr     L0009:	lda     M0001
0001DDr 1  AE rr rr     	ldx     M0001+1
0001E0r 1  20 rr rr     	jsr     pushax
0001E3r 1  A9 28        	lda     #$28
0001E5r 1  20 rr rr     	jsr     tosumula0
0001E8r 1  48           	pha
0001E9r 1  8A           	txa
0001EAr 1  18           	clc
0001EBr 1  69 44        	adc     #$44
0001EDr 1  AA           	tax
0001EEr 1  68           	pla
0001EFr 1  20 rr rr     	jsr     pushax
0001F2r 1  AD rr rr     	lda     M0001
0001F5r 1  AE rr rr     	ldx     M0001+1
0001F8r 1  20 rr rr     	jsr     pushax
0001FBr 1  A9 28        	lda     #$28
0001FDr 1  20 rr rr     	jsr     tosumula0
000200r 1  18           	clc
000201r 1  69 40        	adc     #$40
000203r 1  48           	pha
000204r 1  8A           	txa
000205r 1  69 7F        	adc     #$7F
000207r 1  AA           	tax
000208r 1  68           	pla
000209r 1  20 rr rr     	jsr     pushax
00020Cr 1  A2 00        	ldx     #$00
00020Er 1  A9 28        	lda     #$28
000210r 1  20 rr rr     	jsr     _memcpy
000213r 1  A9 00        	lda     #$00
000215r 1  8D rr rr     	sta     M0002
000218r 1  8D rr rr     	sta     M0002+1
00021Br 1  AD rr rr     L0011:	lda     M0002+1
00021Er 1  C9 00        	cmp     #$00
000220r 1  D0 05        	bne     L0015
000222r 1  AD rr rr     	lda     M0002
000225r 1  C9 28        	cmp     #$28
000227r 1  B0 5A        L0015:	bcs     L0012
000229r 1  AD rr rr     	lda     M0001
00022Cr 1  AE rr rr     	ldx     M0001+1
00022Fr 1  20 rr rr     	jsr     pushax
000232r 1  A9 28        	lda     #$28
000234r 1  20 rr rr     	jsr     tosumula0
000237r 1  18           	clc
000238r 1  6D rr rr     	adc     M0002
00023Br 1  48           	pha
00023Cr 1  8A           	txa
00023Dr 1  6D rr rr     	adc     M0002+1
000240r 1  AA           	tax
000241r 1  68           	pla
000242r 1  48           	pha
000243r 1  8A           	txa
000244r 1  18           	clc
000245r 1  69 D8        	adc     #$D8
000247r 1  AA           	tax
000248r 1  68           	pla
000249r 1  20 rr rr     	jsr     pushax
00024Cr 1  AD rr rr     	lda     M0001
00024Fr 1  AE rr rr     	ldx     M0001+1
000252r 1  20 rr rr     	jsr     pushax
000255r 1  A9 28        	lda     #$28
000257r 1  20 rr rr     	jsr     tosumula0
00025Ar 1  18           	clc
00025Br 1  6D rr rr     	adc     M0002
00025Er 1  48           	pha
00025Fr 1  8A           	txa
000260r 1  6D rr rr     	adc     M0002+1
000263r 1  AA           	tax
000264r 1  68           	pla
000265r 1  18           	clc
000266r 1  69 28        	adc     #$28
000268r 1  85 rr        	sta     ptr1
00026Ar 1  8A           	txa
00026Br 1  69 83        	adc     #$83
00026Dr 1  85 rr        	sta     ptr1+1
00026Fr 1  A0 00        	ldy     #$00
000271r 1  B1 rr        	lda     (ptr1),y
000273r 1  29 0F        	and     #$0F
000275r 1  20 rr rr     	jsr     staspidx
000278r 1  EE rr rr     	inc     M0002
00027Br 1  D0 9E        	bne     L0011
00027Dr 1  EE rr rr     	inc     M0002+1
000280r 1  4C rr rr     	jmp     L0011
000283r 1  A0 00        L0012:	ldy     #$00
000285r 1  B1 rr        	lda     (c_sp),y
000287r 1  20 rr rr     	jsr     _wait_frames
00028Ar 1  EE rr rr     	inc     M0001
00028Dr 1  F0 03 4C rr  	jne     L0002
000291r 1  rr           
000292r 1  EE rr rr     	inc     M0001+1
000295r 1  4C rr rr     	jmp     L0002
000298r 1  A2 00        L0003:	ldx     #$00
00029Ar 1  A9 01        	lda     #$01
00029Cr 1  4C rr rr     	jmp     incsp1
00029Fr 1               
00029Fr 1               .segment	"BSS"
00000Br 1               
00000Br 1               M0001:
00000Br 1  00 00        	.res	2,$00
00000Dr 1               M0002:
00000Dr 1  00 00        	.res	2,$00
00000Fr 1               M0003:
00000Fr 1  00 00        	.res	2,$00
000011r 1               
000011r 1               .endproc
000011r 1               
000011r 1               ; ---------------------------------------------------------------
000011r 1               ; void __near__ wait_video_frames (unsigned int frames)
000011r 1               ; ---------------------------------------------------------------
000011r 1               
000011r 1               .segment	"CODE"
00029Fr 1               
00029Fr 1               .proc	_wait_video_frames: near
00029Fr 1               
00029Fr 1               .segment	"CODE"
00029Fr 1               
00029Fr 1  20 rr rr     	jsr     pushax
0002A2r 1  A2 D0        	ldx     #$D0
0002A4r 1  A9 12        	lda     #$12
0002A6r 1  8D rr rr     	sta     M0001
0002A9r 1  8E rr rr     	stx     M0001+1
0002ACr 1  A9 11        	lda     #$11
0002AEr 1  8D rr rr     	sta     M0002
0002B1r 1  8E rr rr     	stx     M0002+1
0002B4r 1  4C rr rr     	jmp     L000C
0002B7r 1  AD rr rr     L0005:	lda     M0002+1
0002BAr 1  85 rr        	sta     ptr1+1
0002BCr 1  AD rr rr     	lda     M0002
0002BFr 1  85 rr        	sta     ptr1
0002C1r 1  A0 00        	ldy     #$00
0002C3r 1  B1 rr        	lda     (ptr1),y
0002C5r 1  29 80        	and     #$80
0002C7r 1  F0 0E        	beq     L000B
0002C9r 1  AD rr rr     	lda     M0001+1
0002CCr 1  85 rr        	sta     ptr1+1
0002CEr 1  AD rr rr     	lda     M0001
0002D1r 1  85 rr        	sta     ptr1
0002D3r 1  B1 rr        	lda     (ptr1),y
0002D5r 1  F0 E0        	beq     L0005
0002D7r 1  AD rr rr     L000B:	lda     M0002+1
0002DAr 1  85 rr        	sta     ptr1+1
0002DCr 1  AD rr rr     	lda     M0002
0002DFr 1  85 rr        	sta     ptr1
0002E1r 1  B1 rr        	lda     (ptr1),y
0002E3r 1  29 80        	and     #$80
0002E5r 1  F0 15        	beq     L0010
0002E7r 1  AD rr rr     	lda     M0001+1
0002EAr 1  85 rr        	sta     ptr1+1
0002ECr 1  AD rr rr     	lda     M0001
0002EFr 1  85 rr        	sta     ptr1
0002F1r 1  B1 rr        	lda     (ptr1),y
0002F3r 1  F0 05        	beq     L0017
0002F5r 1  A9 00        	lda     #$00
0002F7r 1  4C rr rr     	jmp     L0010
0002FAr 1  A9 01        L0017:	lda     #$01
0002FCr 1  20 rr rr     L0010:	jsr     bnega
0002FFr 1  D0 D6        	bne     L000B
000301r 1  A0 01        L000C:	ldy     #$01
000303r 1  B1 rr        	lda     (c_sp),y
000305r 1  88           	dey
000306r 1  11 rr        	ora     (c_sp),y
000308r 1  08           	php
000309r 1  A2 00        	ldx     #$00
00030Br 1  A9 01        	lda     #$01
00030Dr 1  20 rr rr     	jsr     subeq0sp
000310r 1  28           	plp
000311r 1  D0 A4        	bne     L0005
000313r 1  4C rr rr     	jmp     incsp2
000316r 1               
000316r 1               .segment	"BSS"
000011r 1               
000011r 1               M0001:
000011r 1  00 00        	.res	2,$00
000013r 1               M0002:
000013r 1  00 00        	.res	2,$00
000015r 1               
000015r 1               .endproc
000015r 1               
000015r 1               ; ---------------------------------------------------------------
000015r 1               ; void __near__ wait_video_seconds (unsigned int s)
000015r 1               ; ---------------------------------------------------------------
000015r 1               
000015r 1               .segment	"CODE"
000316r 1               
000316r 1               .proc	_wait_video_seconds: near
000316r 1               
000316r 1               .segment	"CODE"
000316r 1               
000316r 1  20 rr rr     	jsr     pushax
000319r 1  A9 00        	lda     #$00
00031Br 1  8D rr rr     	sta     M0001
00031Er 1  8D rr rr     	sta     M0001+1
000321r 1  AD rr rr     L0002:	lda     M0001
000324r 1  A0 00        	ldy     #$00
000326r 1  D1 rr        	cmp     (c_sp),y
000328r 1  AD rr rr     	lda     M0001+1
00032Br 1  C8           	iny
00032Cr 1  F1 rr        	sbc     (c_sp),y
00032Er 1  B0 12        	bcs     L0003
000330r 1  A2 00        	ldx     #$00
000332r 1  A9 32        	lda     #$32
000334r 1  20 rr rr     	jsr     _wait_video_frames
000337r 1  EE rr rr     	inc     M0001
00033Ar 1  D0 E5        	bne     L0002
00033Cr 1  EE rr rr     	inc     M0001+1
00033Fr 1  4C rr rr     	jmp     L0002
000342r 1  4C rr rr     L0003:	jmp     incsp2
000345r 1               
000345r 1               .segment	"BSS"
000015r 1               
000015r 1               M0001:
000015r 1  00 00        	.res	2,$00
000017r 1               
000017r 1               .endproc
000017r 1               
000017r 1               
